.. _topics-i18n:

====================
Internationalization
====================

Broke has full support for internationalization of text in code.
Here's how it works.

Overview
========

The goal of internationalization is to allow a single Web application to offer
its content and functionality in multiple languages.

You, the Broke developer, can accomplish this goal by adding a minimal amount
of hooks to your Javascript code and templates. These hooks are called
**translation strings**. They tell Broke: "This text should be translated into
the end user's language, if a translation for this text is available in that
language."

Broke takes care of using these hooks to translate Web apps, on the fly,
according to users' language preferences.

Essentially, Broke does two things:

    * It lets developers specify which parts of their apps should be translatable.
    * It uses these hooks to translate Web apps for particular users according
      to their language preferences.

If you don't need internationalization in your app
==================================================

Broke's internationalization hooks are on by default, and that means there's a
bit of i18n-related overhead in certain places of the framework. If you don't
use internationalization, you should take the two seconds to set
:setting:`usei18n = false <usei18n>` in your settings object. If
:setting:`useri18n` is set to ``false``, then Broke will not load the
any additional translation files.

If you do need internationalization: three steps
================================================

    1. Embed translation strings in your Javascript code.
    2. Get translations for those strings, in whichever languages you want to
       support.
    3. Activate the locale middleware in your Broke settings.

.. admonition:: Behind the scenes

    Broke's translation machinery uses a ``gettext`` implementation in Javascript
    written by  Joshua I. Miller <unrtst@cpan.org> (http://jsgettext.berlios.de/).
    Please refer to the specific documentation on the gettext documentation
    shipped with Broke.

1. How to specify translation strings
=====================================

Translation strings specify "This text should be translated." These strings can
appear in your Javascript code. It's your responsibility to mark translatable
strings; the system can only translate strings it knows about.

In Javascript code
--------------

Standard translation
~~~~~~~~~~~~~~~~~~~~

Specify a translation string by instantiating ``broke.utils.translation.gettext``.

.. highlightlang:: javascript

In this example, the text ``"Welcome to my site."`` is marked as a translation
string::

    (function(){
        var gt= broke.utils.translation.gettext.GNUGettext({
            url: '/url/to/my/locale/en/LC_MESSAGES/broke.po'
        });
        
        var myView= function(request, args){
            var output= gt.gettext('Welcome to my site');
            
            return {
                operation: 'create',
                template: '<div>{{ output }}</div>',
                context: {
                    output: output
                }
            }
        }
        
    })();

Translation works on computed values. This example is identical to the previous
one::

    (function(){
        var gt= brokebroke.utils.translation.gettext.GNUGettext({
            url: '/url/to/my/locale/en/LC_MESSAGES/broke.po'
        });
        
        var myView= function(request, args){
            var words= ['Welcome', 'to', 'my', 'site.'];
            
            return {
                operation: 'create',
                template: '<div>{{ output }}</div>',
                context: {
                    output: gt.gettext(word.join(' '))
                }
            }
        }
        
    })();

Translation works on variables. Again, here's an identical example::

    (function(){
        var gt= brokebroke.utils.translation.gettext.GNUGettext({
            url: '/url/to/my/locale/en/LC_MESSAGES/broke.po'
        });
        
        var myView= function(request, args){
            var sentence= 'Welcome to my site.',
                output= gt.gettext(output);
            
            return {
                operation: 'create',
                template: '<div>{{ output }}</div>',
                context: {
                    output: output
                }
            }
        }
    })();

(The caveat with using variables or computed values, as in the previous two
examples, is that Broke's translation-string-detecting utility,
``makemessages.py``, won't be able to find these strings. More on
``makemessages`` later.)

The strings you pass to  ``ugettext()`` can take placeholders,
specified with a Javascript interpolation method. Example::

    (function(){
        var gt= brokebroke.utils.translation.gettext.GNUGettext({
            url: '/url/to/my/locale/en/LC_MESSAGES/broke.po'
        });
        
        var myView= function(request, args){
            var output= gt.gettext('Today is %(month)s, %(day)s.'.interpolate({'month': m, 'day': d}));
            
            return {
                operation: 'create',
                template: '<div>{{ output }}</div>',
                context: {
                    output: output
                }
            }
        }
    })();

This technique lets language-specific translations reorder the placeholder
text. For example, an English translation may be ``"Today is November, 26."``,
while a Spanish translation may be ``"Hoy es 26 de Noviembre."`` -- with the
placeholders (the month and the day) with their positions swapped.

For this reason, you should use named-string interpolation (e.g., ``%(day)s``)
instead of positional interpolation (e.g., ``%s``) whenever you
have more than a single parameter. If you used positional interpolation,
translations wouldn't be able to reorder placeholder text.

Pluralization
~~~~~~~~~~~~~

Use the GNUGettext's method ``ngettext()`` to specify pluralized messages.

``ngettext`` takes three arguments: the singular translation string, the plural
translation string and the number of objects.

This function is useful when you need your Broke application to be localizable
to languages where the number and complexity of `plural forms
<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is
greater than the two forms used in English ('object' for the singular and
'objects' for all the cases where ``count`` is different from zero, irrespective
of its value.)

For example::

    (function(){
        var gt= brokebroke.utils.translation.gettext.GNUGettext({
            url: '/url/to/my/locale/en/LC_MESSAGES/broke.po'
        });
        
        var myView= function(request, args){
            var output= gt.ngettext('there is %(count)s object', 'there are %(count)s objects', count).interpolate({
                count: count
            });
            
            return {
                operation: 'create',
                template: '<div>{{ output }}</div>',
                context: {
                    output: output
                }
            }
        }
    })();

2. How to create language files
===============================

Once you've tagged your strings for later translation, you need to write (or
obtain) the language translations themselves. Here's how that works.

.. admonition:: Locale restrictions

    Broke does not support localizing your application into a locale for
    which Broke itself has not been translated. In this case, it will ignore
    your translation files. If you were to try this and Broke supported it,
    you would inevitably see a mixture of translated strings (from your
    application) and English strings (from Broke itself). If you want to
    support a locale for your application that is not already part of
    Broke, you'll need to make at least a minimal translation of the Broke
    core. See the relevant :ref:`LocaleMiddleware note<locale-middleware-notes>`
    for more details.

Message files
-------------

The first step is to create a **message file** for a new language. A message
file is a plain-text file, representing a single language, that contains all
available translation strings and how they should be represented in the given
language. Message files have a ``.po`` file extension.

Broke comes with a tool, ``makemessages.py``, that automates the creation and
upkeep of these files.

To create or update a message file, run this command::

    makemessages.py -l de

...where ``de`` is the language code for the message file you want to create.
The language code, in this case, is in locale format. For example, it's
``pt_BR`` for Brazilian Portuguese and ``de_AT`` for Austrian German.

The script should be run from one of three places:

    * The root directory of your Broke project.
    * The root directory of your Broke app.
    * The root ``broke`` directory. This is only relevant when you are
       creating a translation for Broke itself, see :ref:`contributing-translations`.

The script runs over your project source tree or your application source tree
and pulls out all strings marked for translation. It creates (or updates) a
message file in the directory ``locale/LANG/LC_MESSAGES``. In the ``de``
example, the file will be ``locale/de/LC_MESSAGES/django.po``.

.. _create a JavaScript translation catalog: `Creating JavaScript translation catalogs`_

.. admonition:: No gettext?

    If you don't have the ``gettext`` utilities installed, ``django-admin.py
    makemessages`` will create empty files. If that's the case, either install
    the ``gettext`` utilities or just copy the English message file
    (``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting
    point; it's just an empty translation file.

.. admonition:: Working on Windows?

   If you're using Windows and need to install the GNU gettext utilities so
   ``django-admin makemessages`` works see `gettext on Windows`_ for more
   information.

The format of ``.po`` files is straightforward. Each ``.po`` file contains a
small bit of metadata, such as the translation maintainer's contact
information, but the bulk of the file is a list of **messages** -- simple
mappings between translation strings and the actual translated text for the
particular language.

For example, if your Broke app contained a translation string for the text
``"Welcome to my site."``, like so::

    gt.gettext("Welcome to my site.");

...then ``makemessages.py`` will have created a ``.po`` file containing the
following snippet -- a message::

    #: path/to/python/module.py:23
    msgid "Welcome to my site."
    msgstr ""

A quick explanation:

    * ``msgid`` is the translation string, which appears in the source. Don't
      change it.
    * ``msgstr`` is where you put the language-specific translation. It starts
      out empty, so it's your responsibility to change it. Make sure you keep
      the quotes around your translation.
    * As a convenience, each message includes, in the form of a comment line
      prefixed with ``#`` and located above the ``msgid`` line, the filename and
      line number from which the translation string was gleaned.

Long messages are a special case. There, the first string directly after the
``msgstr`` (or ``msgid``) is an empty string. Then the content itself will be
written over the next few lines as one string per line. Those strings are
directly concatenated. Don't forget trailing spaces within the strings;
otherwise, they'll be tacked together without whitespace!

.. admonition:: Mind your charset

    When creating a PO file with your favorite text editor, first edit
    the charset line (search for ``"CHARSET"``) and set it to the charset
    you'll be using to edit the content. Due to the way the ``gettext`` tools
    work internally and because we want to allow non-ASCII source strings in
    Broke's core and your applications, you **must** use UTF-8 as the encoding
    for your PO file. This means that everybody will be using the same
    encoding, which is important when Broke processes the PO files.

To reexamine all source code and templates for new translation strings and
update all message files for **all** languages, run this::

    makemessages.py -a

Compiling message files
-----------------------

Broke does not support (yes) compiling messages in to MO files. Stay tuned for
future support.

.. _how-broke-discovers-language-preference:

3. How Broke discovers language preference
==========================================

Once you've prepared your translations -- or, if you just want to use the
translations that come with Broke -- you'll just need to activate translation
for your app.

Behind the scenes, Broke has a very flexible model of deciding which language
should be used -- installation-wide, for a particular user, or both.

To set an installation-wide language preference,
set :setting:`broke.conf.settings.languageCode`.
Broke uses this language as the default translation -- the final attempt if no
other translator finds a translation.

If all you want to do is run Broke with your native language, and a language
file is available for your language, all you need to do is set
``broke.conf.settings.languageCode``.

Using translations in your own projects
=======================================

Broke looks for translations by following this algorithm:

    * First, it looks for a ``locale`` directory in the application directory
      of the view that's being called. If it finds a translation for the
      selected language, the translation will be downloaded via an ajax call.
    * Next, it looks for a ``locale`` directory in the project directory. If it
      finds a translation, the translation will be downloaded.
    * Finally, it checks the Broke-provided base translation in
      ``broke/app/locale``.

This way, you can write applications that include their own translations, and
you can override base translations in your project path. Or, you can just build
a big project out of several apps and put all translations into one big project
message file. The choice is yours.

All message file repositories are structured the same way. They are:

    * ``/path/to/my/app/locale/<language>/LC_MESSAGES/django.(po)``
    * ``/path/to/my/project/locale/<language>/LC_MESSAGES/django.(po)``
    * All paths listed in ``LOCALE_PATHS`` in your settings file are
      searched in that order for ``<language>/LC_MESSAGES/django.(po)``
    * ``/broke/app/locale/<language>/LC_MESSAGES/django.(po)``

To create message files, you use the same ``makemessages.py``
tool as with the Broke message files. You only need to be in the right place
-- in the directory where either the ``conf/locale`` (in case of the source
tree) or the ``locale/`` (in case of app messages or project messages)
directory are located.

Finally, you should give some thought to the structure of your translation
files. If your applications need to be delivered to other users and will
be used in other projects, you might want to use app-specific translations.
But using app-specific translations and project translations could produce
weird problems with ``makemessages``: ``makemessages`` will traverse all
directories below the current path and so might put message IDs into the
project message file that are already in application message files.

The easiest way out is to store applications that are not part of the project
(and so carry their own translations) outside the project tree. That way,
``makemessages.py`` on the project level will only translate
strings that are connected to your explicit project and not strings that are
distributed independently.

``gettext`` on Windows
======================

This is only needed for people who either want to extract message IDs or compile
message files (``.po``). Translation work itself just involves editing existing
files of this type, but if you want to create your own message files, or want to
test or compile a changed message file, you will need the ``gettext`` utilities:

    * Download the following zip files from the GNOME servers
      http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/ or from one
      of its mirrors_

      * ``gettext-runtime-X.zip``
      * ``gettext-tools-X.zip``

      ``X`` is the version number, we recomend using ``0.15`` or higher.

    * Extract the contents of the ``bin\`` directories in both files to the
      same folder on your system (i.e. ``C:\Program Files\gettext-utils``)

    * Update the system PATH:

      * ``Control Panel > System > Advanced > Environment Variables``
      * In the ``System variables`` list, click ``Path``, click ``Edit``
      * Add ``;C:\Program Files\gettext-utils\bin`` at the end of the
        ``Variable value`` field

.. _mirrors: http://ftp.gnome.org/pub/GNOME/MIRRORS

You may also use ``gettext`` binaries you have obtained elsewhere, so long as
the ``xgettext --version`` command works properly. Some version 0.14.4 binaries
have been found to not support this command. Do not attempt to use Django
translation utilities with a ``gettext`` package if the command ``xgettext
--version`` entered at a Windows command prompt causes a popup window saying
"xgettext.exe has generated errors and will be closed by Windows".
