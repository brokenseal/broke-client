.. _topics-db-queries:

==============
Making queries
==============

.. currentmodule:: broke.db.models

Once you've created your :ref:`data models <topics-db-models>`, Broke
automatically gives you a database-abstraction API that lets you create,
retrieve, update and delete objects. This document explains how to use this
API. Refer to the :ref:`data model reference <ref-models-index>` for full
details of all the various model lookup options.

Throughout this guide (and in the reference), we'll refer to the following
models, which comprise a weblog application:

.. _queryset-model-example:

.. code-block:: javascript
    
    (function(){
        var Model= broke.db.models.Model;
        
        Model.extend("myApp.models.Blog", {
            // Class init
            init: function(){
                this.app_label= 'blog';
                this.table= this.app_label + '_' + this.name.lower();
                
                this._super();
            }
        },{
            // instance init
            init: function(args){
                this.fields= {
                    name: '',
                    tagline: ''
                };
                
                this._super(args, this.fields);
            }
        });
        
        Model.extend("myApp.models.Author", {
            // Class init
            init: function(){
                this.app_label= 'blog';
                this.table= this.app_label + '_' + this.name.lower();
                
                this._super();
            }
        },{
            // instance init
            init: function(args){
                this.fields= {
                    name: '',
                    email: ''
                };
                
                this._super(args, this.fields);
            }
        });
        
        Model.extend("myApp.models.Entry", {
            // Class init
            init: function(){
                this.app_label= 'blog';
                this.table= this.app_label + '_' + this.name.lower();
                
                this._super();
            }
        },{
            // instance init
            init: function(args){
                this.fields= {
                    blog: null,
                    headline: '',
                    body_text: '',
                    pub_date: null,
                    author: [],
                    n_comments: 0,
                    n_pingbacks: 0,
                    rating: 0
                };
                
                this._super(args, this.fields);
            }
        });
    })();

Creating objects
================

To represent database-table data in Javascript objects, Broke uses an intuitive
system: A model class represents a database table, and an instance of that
class represents a particular record in the database table.
It obviously all translates back to Javavascript which in turn translates a
database table in an array of objects with every objects representing a single
instance of that particular class.

To create an object, instantiate it using JSON data retrieved from the server,
or provide it yourself, as keyword arguments to the model class,
then call ``save()`` to save it to the database.

Assuming models live in an object ``myApp.blog.models``, here's an example::

    : var Blog= myApp.blog.models.Blog;
    : var b = new Blog({
        pk: 2,
        model: blog_blog,
        fields: {
            name: 'Beatles Blog',
            tagline: 'All the latest Beatles news.'
    });
    : b.save();

This performs an Ajax POST behind the scenes. Broke doesn't perform any requests
to the server until you explicitly call ``save()``.

The ``save()`` method returns the status code returned from the server.

.. seealso::

    ``save()`` takes a number of advanced options not described here.
    See the documentation for ``save()`` for complete details.

    To create an object and save it all in one step see the ```create()```
    method.

Saving changes to objects
=========================

To save changes to an object that's already in the database, use ``save()``.

Given a ``Blog`` instance ``b5`` that has already been saved to the database,
this example changes its name and updates its record in the database::

    : b5.name = 'New name';
    : b5.save();

This performs an Ajax POST behind the scenes. Broke doesn't perform any requests
to the server until you explicitly call ``save()``.
The request is sent to the server and then processed by your preferred
server side language, it is your job find the better way to manage an incoming
request to save an object without a primary key.
Have a look at the examples shipped with broke for some hints.

Saving ``ForeignKey`` and ``ManyToManyField`` fields
----------------------------------------------------

Updating ``foreign key`` type of fields works exactly the same way as saving
a normal field; simply assign an object of the right type to the field in
question::

    : cheese_blog = Blog.objects.get({name: "Cheddar Talk"});
    : entry.blog = cheese_blog;
    : entry.save();

Updating a ``ManyToManyField`` type of field works a little differently;
use the ``push()`` method on the field to add the id of the related object::

    : joe = Author.objects.create({name: "Joe"});
    : entry.authors.push(joe.id);

Broke will not (yet) complain if you try to assign or add an object
of the wrong type.

Retrieving objects
==================

To retrieve objects from your database, you construct a ``QuerySet`` via a
``Manager`` on your model class.

A ``QuerySet`` represents a collection of objects from your database. It can
have zero, one or many *filters* -- criteria that narrow down the collection
based on given parameters.

You get a ``QuerySet`` by using your model's ``Manager``. Each model has at
least one ``Manager``, and it's called ``objects`` by default. Access it
directly via the model class, like so::

    : Blog.objects;
    : b = new Blog({name: 'Foo', tagline:'Bar'});
    : b.objects === undefined   // true because Manager isn't accessible
                                // via instances.

.. note::

    ``Managers`` are accessible only via model classes, rather than from model
    instances.

The ``Manager`` is the main source of ``QuerySets`` for a model. It acts as a
"root" ``QuerySet`` that describes all objects in the model's database table.
For example, ``Blog.objects`` is the initial ``QuerySet`` that contains all
``Blog`` objects in the database.

Retrieving all objects
----------------------

The simplest way to retrieve objects from a table is to get all of them.
To do this, use the ``all()`` method on a ``Manager``::

    : all_entries = Entry.objects.all();

The ``all()`` method returns a ``QuerySet`` of all the objects in the database.

(If ``Entry.objects`` is a ``QuerySet``, why can't we just do ``Entry.objects``?
That's because ``Entry.objects``, the root ``QuerySet``, is a special case
that cannot be evaluated. The ``all()`` method returns a ``QuerySet`` that
*can* be evaluated.)

Retrieving specific objects with filters
----------------------------------------

The root ``QuerySet`` provided by the ``Manager`` describes all objects in the
database table. Usually, though, you'll need to select only a subset of the
complete set of objects.

To create such a subset, you refine the initial ``QuerySet``, adding filter
conditions. The two most common ways to refine a ``QuerySet`` are:

    ``filter(**kwargs)``
        Returns a new ``QuerySet`` containing objects that match the given
        lookup parameters.

    ``exclude(**kwargs)``
        Returns a new ``QuerySet`` containing objects that do *not* match the
        given lookup parameters.

The lookup parameters (``**kwargs`` in the above function definitions) should
be in the format described in `Field lookups`_ below.

For example, to get a ``QuerySet`` of blog entries from the year 2006, use
``filter()`` like so::

    Entry.objects.filter({
        pub_date__year: 2006
    });

We don't have to add an ``all()`` -- ``Entry.objects.all().filter(...)``. That
would still work, but you only need ``all()`` when you want all objects from the
root ``QuerySet``.
If we actually want all the data, we need to specify ``all()`` at the end of
the chain of filters, like so:

    Entry.objects.filter({
        pub_date__year: 2006
    }).all();

This chain will get you all the entries published during the year 2006 in which
the name contains 'news' but does not contain 'beatles'.

.. _chaining-filters:

Chaining filters
~~~~~~~~~~~~~~~~

The result of refining a ``QuerySet`` is itself a ``QuerySet``, so it's
possible to chain refinements together. For example::

    : Entry.objects.filter({
            headline__startsWith: 'What'
        }).exclude({
            pub_date__gte: '2006-14-02'
        }).filter({
            pub_date__gte: '2004-01-01'
        });

This takes the initial ``QuerySet`` of all entries in the database, adds a
filter, then an exclusion, then another filter. The final result is a
``QuerySet`` containing all entries with a headline that starts with "What",
that were published between January 1, 2005, and the current day.

.. _filtered-querysets-are-unique:

Filtered QuerySets are unique
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each time you refine a ``QuerySet``, you get a brand-new ``QuerySet`` that is
in no way bound to the previous ``QuerySet``. Each refinement creates a
separate and distinct ``QuerySet`` that can be stored, used and reused.

Example::

    : var q1 = Entry.objects.filter({headline__startswith: "What"});
    : var q2 = q1.exclude({pub_date__gte: '2010-01-10'});
    : var q3 = q1.filter({pub_date__gte: '2010-01-10'});

These three ``QuerySets`` are separate. The first is a base ``QuerySet``
containing all entries that contain a headline starting with "What". The second
is a subset of the first, with an additional criteria that excludes records
whose ``pub_date`` is greater than now. The third is a subset of the first,
with an additional criteria that selects only the records whose ``pub_date`` is
greater than now. The initial ``QuerySet`` (``q1``) is unaffected by the
refinement process. ``QuerySets`` in Broke are not lazy.

Other QuerySet methods
~~~~~~~~~~~~~~~~~~~~~~

Most of the time you'll use ``all()``, ``filter()`` and ``exclude()`` when you
need to look up objects from the database. However, that's far from all there is;
see the :ref:`QuerySet API Reference <queryset-api>` for a complete list
of all the various ``QuerySet`` methods.

.. _limiting-querysets:

Limiting QuerySets
------------------

Use a subset of Javascript's array-slicing syntax to limit your ``QuerySet`` to a
certain number of results.

For example, this returns the first 5 objects ::

    : Entry.objects.all().slice(0,5);

This returns the sixth through tenth objects::

    : Entry.objects.all().slice(5,10);

Generally, slicing a ``QuerySet`` returns a sliced array. To retrieve a
*single* object rather than a list use a simple index instead of a
slice. For example, this returns the first ``Entry`` in the database::

    : Entry.objects.all()[0]


.. _field-lookups-intro:

Field lookups
-------------

They're specified as keyword arguments to the ``QuerySet`` methods ``filter()``,
``exclude()`` and ``get()``.

Basic lookups keyword arguments take the form ``field__lookuptype=value``.
(That's a double-underscore). For example::

    : Entry.objects.filter({pub_date__lte: '2006-01-01'});


If you pass an invalid keyword argument, a lookup function will raise
``NotImplemented``.

The database API supports about two dozen lookup types; a complete reference
can be found in the :ref:`field lookup reference <field-lookups>`.
To give you a taste of what's available, here's some of the more common lookups
you'll probably use:

    :lookup:`exact`
        An "exact" match. For example::

            : Entry.objects.get({headline__exact: "Man bites dog"});

        If you don't provide a lookup type -- that is, if your keyword argument
        doesn't contain a double underscore -- the lookup type is assumed to be
        ``exact``.

        For example, the following two statements are equivalent::

            : Blog.objects.get({id__exact: 14});  # Explicit form
            : Blog.objects.get({id: 14});         # __exact is implied

        This is for convenience, because ``exact`` lookups are the common case.

    :lookup:`iexact`
        A case-insensitive match. So, the query::

            : Blog.objects.get({name__iExact: "beatles blog"});

        Would match a ``Blog`` titled "Beatles Blog", "beatles blog", or even
        "BeAtlES blOG".

    :lookup:`contains`
        Case-sensitive containment test. For example::

            : Entry.objects.get({headline__contains: 'Lennon'});

        Note this will match the headline ``'Today Lennon honored'`` but not
        ``'today lennon honored'``.

        There's also a case-insensitive version, :lookup:`icontains`.

    :lookup:`startsWith`, :lookup:`endsWith`
        Starts-with and ends-with search, respectively. There are also
        case-insensitive versions called :lookup:`iStartsWith` and
        :lookup:`iEndsWith`.

Again, this only scratches the surface. A complete reference can be found in the
:ref:`field lookup reference <field-lookups>`.
Lookups that span relationships are not yet implemented.

Deleting objects
================

The delete method, conveniently, is named ``delete()``. This method immediately
deletes the object returns the status code returned from the server. Example::

    : e.delete()

You can also delete objects in bulk. Every ``QuerySet`` has a ``delete()``
method, which deletes all members of that ``QuerySet``.

For example, this deletes all ``Entry`` objects with a ``pub_date`` year of
2005::

    : Entry.objects.filter(pub_date__year: 2005}).delete();


Note that ``delete()`` is the only ``QuerySet`` method that is not exposed on a
``Manager`` itself. This is a safety mechanism to prevent you from accidentally
requesting ``Entry.objects.delete()``, and deleting *all* the entries. If you
*do* want to delete all the objects, then you have to explicitly request a
complete query set::

    : Entry.objects.all().delete();

.. _topics-db-queries-update:
